var documenterSearchIndex = {"docs":
[{"location":"turbo/","page":"Turbo","title":"Turbo","text":"CurrentModule = BLASBenchmarksCPU","category":"page"},{"location":"turbo/#Disabling-CPU-Turbo","page":"Turbo","title":"Disabling CPU Turbo","text":"","category":"section"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"Most recent CPUs have the ability to turbo, increasing their clock speeds for brief durations of time as thermal envelope and longer term power-use limitations allow. This is great for performance, but bad for benchmarking.","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"If you're running Linux, it's probably easy to enable or disable turbo settings without having to reboot into your bios. The Linux Kernel Documentation is fairly thorough in discussing CPUFreq and intel_pstate scaling drivers.","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"To check those on my system, I can run:","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"> cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_driver\nintel_pstate\nintel_pstate\nintel_pstate\nintel_pstate\nintel_pstate\nintel_pstate\nintel_pstate\nintel_pstate","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"This tells me it is using intel_pstate in active mode.","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"The documentation on intel_pstate mentions the no_turbo attribute:","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"If set (equal to 1), the driver is not allowed to set any turbo P-states (see Turbo P-states Support). If unset (equalt to 0, which is the default), turbo P-states can be set by the driver.","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"This attribute is writable, so running","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"echo \"1\" | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"disables turbo on this system. This, and closing programs that would compete for system resources (e.g., internet browsers; you can run (h)top to see if any processes are consuming non-negligible resources), should hopefully make benchmarking reasonably consistent and reliable.","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"Finally, when I'm done benchmarking, I can reenable turbo by running:","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"echo \"0\" | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"If your system does not use the intel_pstate driver, check for","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"/sys/devices/system/cpu/cpufreq/boost","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"discussed here in the kernel documentation. If the file is present, you should be able to disable boost with","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"echo \"0\" | sudo tee /sys/devices/system/cpu/cpufreq/boost","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"and then reenable with","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"echo \"1\" | sudo tee /sys/devices/system/cpu/cpufreq/boost","category":"page"},{"location":"turbo/","page":"Turbo","title":"Turbo","text":"In either case, you may find it convenient to place these snippets in #! /bin/bash scripts for conveniently turning your systems boost on and off as desired.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"CurrentModule = BLASBenchmarksCPU","category":"page"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Remember to start Julia with multiple threads with e.g. one of the following:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia -t auto\njulia -t 4\nSet the JULIA_NUM_THREADS environment variable to 4 before starting Julia","category":"page"},{"location":"usage/#Example-1","page":"Usage","title":"Example 1","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> using BLASBenchmarksCPU\n\njulia> benchmark_result = runbench(Float64)\n\njulia> plot_directory = \"/foo/bar/baz/\"\n\njulia> BLASBenchmarksCPU.plot(benchmark_result; plot_directory)","category":"page"},{"location":"usage/#Example-2","page":"Usage","title":"Example 2","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> using BLASBenchmarksCPU\n\njulia> libs = [:Gaius, :Octavian, :OpenBLAS]\n\njulia> sizes = [10, 20, 30]\n\njulia> sizes = [1_000]\n\njulia> threaded = true\n\njulia> benchmark_result = runbench(Float64; libs, sizes, threaded)\n\njulia> plot_directory = \"/foo/bar/baz/\"\n\njulia> BLASBenchmarksCPU.plot(benchmark_result; plot_directory)","category":"page"},{"location":"memory-required/","page":"Memory Required for Large Matrices","title":"Memory Required for Large Matrices","text":"CurrentModule = BLASBenchmarksCPU","category":"page"},{"location":"memory-required/#Memory-Required-for-Large-Matrices","page":"Memory Required for Large Matrices","title":"Memory Required for Large Matrices","text":"","category":"section"},{"location":"memory-required/","page":"Memory Required for Large Matrices","title":"Memory Required for Large Matrices","text":"These tables show how much memory is required for four matrices of the given size and type. (We need four matrices: A, B, C1, and C2.)","category":"page"},{"location":"memory-required/#Float64","page":"Memory Required for Large Matrices","title":"Float64","text":"","category":"section"},{"location":"memory-required/","page":"Memory Required for Large Matrices","title":"Memory Required for Large Matrices","text":"Matrix Size Memory\n1k by 1k 0.03 GiB\n2k by 2k 0.12 GiB\n3k by 3k 0.27 GiB\n4k by 4k 0.48 GiB\n5k by 5k 0.75 GiB\n6k by 6k 1.07 GiB\n7k by 7k 1.46 GiB\n8k by 8k 1.91 GiB\n9k by 9k 2.41 GiB\n10k by 10k 2.98 GiB\n11k by 11k 3.61 GiB\n12k by 12k 4.29 GiB\n13k by 13k 5.04 GiB\n14k by 14k 5.84 GiB\n15k by 15k 6.71 GiB\n16k by 16k 7.63 GiB\n17k by 17k 8.61 GiB\n18k by 18k 9.66 GiB\n19k by 19k 10.76 GiB\n20k by 20k 11.92 GiB\n30k by 30k 26.82 GiB\n40k by 40k 47.68 GiB\n50k by 50k 74.51 GiB\n60k by 60k 107.29 GiB\n70k by 70k 146.03 GiB\n80k by 80k 190.73 GiB\n90k by 90k 241.4 GiB\n100k by 100k 298.02 GiB","category":"page"},{"location":"memory-required/#Float32","page":"Memory Required for Large Matrices","title":"Float32","text":"","category":"section"},{"location":"memory-required/","page":"Memory Required for Large Matrices","title":"Memory Required for Large Matrices","text":"Matrix Size Memory\n1k by 1k 0.01 GiB\n2k by 2k 0.06 GiB\n3k by 3k 0.13 GiB\n4k by 4k 0.24 GiB\n5k by 5k 0.37 GiB\n6k by 6k 0.54 GiB\n7k by 7k 0.73 GiB\n8k by 8k 0.95 GiB\n9k by 9k 1.21 GiB\n10k by 10k 1.49 GiB\n11k by 11k 1.8 GiB\n12k by 12k 2.15 GiB\n13k by 13k 2.52 GiB\n14k by 14k 2.92 GiB\n15k by 15k 3.35 GiB\n16k by 16k 3.81 GiB\n17k by 17k 4.31 GiB\n18k by 18k 4.83 GiB\n19k by 19k 5.38 GiB\n20k by 20k 5.96 GiB\n30k by 30k 13.41 GiB\n40k by 40k 23.84 GiB\n50k by 50k 37.25 GiB\n60k by 60k 53.64 GiB\n70k by 70k 73.02 GiB\n80k by 80k 95.37 GiB\n90k by 90k 120.7 GiB\n100k by 100k 149.01 GiB","category":"page"},{"location":"memory-required/#Int64","page":"Memory Required for Large Matrices","title":"Int64","text":"","category":"section"},{"location":"memory-required/","page":"Memory Required for Large Matrices","title":"Memory Required for Large Matrices","text":"Matrix Size Memory\n1k by 1k 0.03 GiB\n2k by 2k 0.12 GiB\n3k by 3k 0.27 GiB\n4k by 4k 0.48 GiB\n5k by 5k 0.75 GiB\n6k by 6k 1.07 GiB\n7k by 7k 1.46 GiB\n8k by 8k 1.91 GiB\n9k by 9k 2.41 GiB\n10k by 10k 2.98 GiB\n11k by 11k 3.61 GiB\n12k by 12k 4.29 GiB\n13k by 13k 5.04 GiB\n14k by 14k 5.84 GiB\n15k by 15k 6.71 GiB\n16k by 16k 7.63 GiB\n17k by 17k 8.61 GiB\n18k by 18k 9.66 GiB\n19k by 19k 10.76 GiB\n20k by 20k 11.92 GiB\n30k by 30k 26.82 GiB\n40k by 40k 47.68 GiB\n50k by 50k 74.51 GiB\n60k by 60k 107.29 GiB\n70k by 70k 146.03 GiB\n80k by 80k 190.73 GiB\n90k by 90k 241.4 GiB\n100k by 100k 298.02 GiB","category":"page"},{"location":"memory-required/#Int32","page":"Memory Required for Large Matrices","title":"Int32","text":"","category":"section"},{"location":"memory-required/","page":"Memory Required for Large Matrices","title":"Memory Required for Large Matrices","text":"Matrix Size Memory\n1k by 1k 0.01 GiB\n2k by 2k 0.06 GiB\n3k by 3k 0.13 GiB\n4k by 4k 0.24 GiB\n5k by 5k 0.37 GiB\n6k by 6k 0.54 GiB\n7k by 7k 0.73 GiB\n8k by 8k 0.95 GiB\n9k by 9k 1.21 GiB\n10k by 10k 1.49 GiB\n11k by 11k 1.8 GiB\n12k by 12k 2.15 GiB\n13k by 13k 2.52 GiB\n14k by 14k 2.92 GiB\n15k by 15k 3.35 GiB\n16k by 16k 3.81 GiB\n17k by 17k 4.31 GiB\n18k by 18k 4.83 GiB\n19k by 19k 5.38 GiB\n20k by 20k 5.96 GiB\n30k by 30k 13.41 GiB\n40k by 40k 23.84 GiB\n50k by 50k 37.25 GiB\n60k by 60k 53.64 GiB\n70k by 70k 73.02 GiB\n80k by 80k 95.37 GiB\n90k by 90k 120.7 GiB\n100k by 100k 149.01 GiB","category":"page"},{"location":"memory-required/#Generating-These-Tables","page":"Memory Required for Large Matrices","title":"Generating These Tables","text":"","category":"section"},{"location":"memory-required/","page":"Memory Required for Large Matrices","title":"Memory Required for Large Matrices","text":"mem_req(s, ::Type{T}) where {T} = 4s^2*sizeof(T) / (1 << 30)\n\nfunction print_table(::Type{T}, Ns = nothing) where {T}\n    println(\"| Matrix Size | Memory |\")\n    println(\"| ----------- | ------ |\")\n    if Ns isa Nothing\n        _Ns = sort(unique(vcat(collect(1:1:20), collect(20:10:100))))\n    else\n        _Ns = Ns\n    end\n    for N in _Ns\n        mem = mem_req(N * 1_000, T)\n        m = round(mem; digits = 2)\n        println(\"| $(N)k by $(N)k | $(m) GiB |\")\n    end\n    return nothing\nend","category":"page"},{"location":"memory-required/","page":"Memory Required for Large Matrices","title":"Memory Required for Large Matrices","text":"julia> print_table(Float64)\njulia> print_table(Float32)\njulia> print_table(Int64)\njulia> print_table(Int32)","category":"page"},{"location":"public-api/","page":"Public API","title":"Public API","text":"CurrentModule = BLASBenchmarksCPU","category":"page"},{"location":"public-api/#Public-API","page":"Public API","title":"Public API","text":"","category":"section"},{"location":"public-api/","page":"Public API","title":"Public API","text":"Pages   = [\"public-api.md\"]","category":"page"},{"location":"public-api/","page":"Public API","title":"Public API","text":"Modules = [BLASBenchmarksCPU]\nPublic = true\nPrivate = false","category":"page"},{"location":"public-api/#BLASBenchmarksCPU.benchmark_result_df-Tuple{BLASBenchmarksCPU.BenchmarkResult}","page":"Public API","title":"BLASBenchmarksCPU.benchmark_result_df","text":"benchmark_result_df(benchmark_result::BenchmarkResult)\n\n\n\n\n\n","category":"method"},{"location":"public-api/#BLASBenchmarksCPU.benchmark_result_threaded-Tuple{BLASBenchmarksCPU.BenchmarkResult}","page":"Public API","title":"BLASBenchmarksCPU.benchmark_result_threaded","text":"benchmark_result_threaded(benchmark_result::BenchmarkResult)\n\n\n\n\n\n","category":"method"},{"location":"public-api/#BLASBenchmarksCPU.benchmark_result_type-Union{Tuple{BLASBenchmarksCPU.BenchmarkResult{T}}, Tuple{T}} where T","page":"Public API","title":"BLASBenchmarksCPU.benchmark_result_type","text":"benchmark_result_type(benchmark_result::BenchmarkResult)\n\n\n\n\n\n","category":"method"},{"location":"public-api/#BLASBenchmarksCPU.logspace-Tuple{Any,Any,Any}","page":"Public API","title":"BLASBenchmarksCPU.logspace","text":"logspace(start, stop, length)\n\nDefines a monotonically increasing range, log spaced when possible. Useful for defining a range of sizes for benchmarks.\n\njulia> collect(logspace(1,100,3))\n3-element Vector{Int64}:\n   1\n  10\n 100\n\njulia> collect(logspace(1,10,3))\n3-element Vector{Int64}:\n  1\n  3\n 10\n\njulia> collect(logspace(1,5,3))\n3-element Vector{Int64}:\n 1\n 2\n 5\n\njulia> collect(logspace(1,3,3))\n3-element Vector{Int64}:\n 1\n 2\n 3\n\n\n\n\n\n","category":"method"},{"location":"public-api/#BLASBenchmarksCPU.plot-Union{Tuple{BLASBenchmarksCPU.BenchmarkResult{T}}, Tuple{T}} where T","page":"Public API","title":"BLASBenchmarksCPU.plot","text":"plot(br::BenchmarkResult;\n     desc = \"\",\n     logscale = true,\n     width = 1200,\n     height = 600,\n     plot_directory = default_plot_directory(),\n     plot_filename = default_plot_filename(br; desc = desc, logscale = logscale),\n     file_extensions = [\"svg\", \"png\"])\n\n\n\n\n\n","category":"method"},{"location":"public-api/#BLASBenchmarksCPU.runbench-Union{Tuple{}, Tuple{Type{T}}, Tuple{T}} where T","page":"Public API","title":"BLASBenchmarksCPU.runbench","text":"runbench(T = Float64;\n         libs = default_libs(T),\n         sizes = logspace(2, 4000, 200),\n         threaded::Bool = Threads.nthreads() > 1,\n         A_transform = identity,\n         B_transform = identity,\n         sleep_time = 0.0)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = BLASBenchmarksCPU","category":"page"},{"location":"#BLASBenchmarksCPU","page":"Home","title":"BLASBenchmarksCPU","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BLASBenchmarksCPU is a Julia package for benchmarking BLAS libraries on CPUs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The source code for this package is available in the GitHub repository.","category":"page"},{"location":"#Related-Packages","page":"Home","title":"Related Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You may also be interested in:","category":"page"},{"location":"","page":"Home","title":"Home","text":"BLASBenchmarksGPU.jl","category":"page"},{"location":"internals/","page":"Internals (Private)","title":"Internals (Private)","text":"CurrentModule = BLASBenchmarksCPU","category":"page"},{"location":"internals/#Internals-(Private)","page":"Internals (Private)","title":"Internals (Private)","text":"","category":"section"},{"location":"internals/","page":"Internals (Private)","title":"Internals (Private)","text":"Pages   = [\"internals.md\"]","category":"page"},{"location":"internals/","page":"Internals (Private)","title":"Internals (Private)","text":"Modules = [BLASBenchmarksCPU]\nPrivate = true\nPublic = false","category":"page"},{"location":"internals/#BLASBenchmarksCPU.all_libs-Tuple{}","page":"Internals (Private)","title":"BLASBenchmarksCPU.all_libs","text":"all_libs()\n\n\n\n\n\n","category":"method"},{"location":"internals/#BLASBenchmarksCPU.default_libs-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"Internals (Private)","title":"BLASBenchmarksCPU.default_libs","text":"default_libs(T)\n\n\n\n\n\n","category":"method"},{"location":"internals/#BLASBenchmarksCPU.default_plot_directory-Tuple{}","page":"Internals (Private)","title":"BLASBenchmarksCPU.default_plot_directory","text":"default_plot_directory()\n\n\n\n\n\n","category":"method"},{"location":"internals/#BLASBenchmarksCPU.default_plot_filename-Union{Tuple{BLASBenchmarksCPU.BenchmarkResult{T}}, Tuple{T}} where T","page":"Internals (Private)","title":"BLASBenchmarksCPU.default_plot_filename","text":"default_plot_filename(br::BenchmarkResult;\n                      desc,\n                      logscale)\n\n\n\n\n\n","category":"method"}]
}
